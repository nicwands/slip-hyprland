#! /bin/bash

set -eo pipefail

VERSION="2.0.6"

# Sane defaults in case of not being set in the config / config not existing.
RECORD_PIDFILE="/tmp/slip_record.pid"
IMAGES="$HOME/Pictures"
VIDEOS="$HOME/Videos"
GIF_SCALE="640"
GIF_FPS=15
SOUND=0
NOUPLOAD=1

DMENU_CMD="rofi -dmenu -p slip"

# Load config.
CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/rofi/slip-hyprland/config"
if [ -f $CONFIG ]; then
    source $CONFIG
else
    echo "No config was found - using default options.  Please copy the example configuration to ~/.config/slip/config from https://github.com/Toqozz/slip"
fi

# Dmenu prompts.
TYPE_SELECTED=false
DMENU_TYPE_OPTS="Screenshot
Video
GIF
Exit"
DMENU_AREA_OPTS="Active
Screen
Output
Area"
DMENU_RECORD_OPTS="Stop
Cancel"

function usage() {
    echo ""
    echo "  slip [ -h | -v | -s | -r | -a | -q ] -nu"
    echo "      Uploads images taken with ffmpeg via slop to imgur.  Quick video recording."
    echo "      That's all."
    echo ""
    echo "      -h  | --help         show this help"
    echo "      -v  | --version      show version"
    echo "      -s  | --screenshot   take a screenshot (skip dmenu)"
    echo "      -g  | --gif          take a gif (skip dmenu)"
    echo "      -r  | --record       take a video (skip dmenu)"
    echo "      -nu | --no-upload   don't upload the result"
    echo "      -q  | --stop         stop recording a video / gif (skip dmenu) (only when recording)"
    echo ""
}

# Take the shot (or start the video.)
function shot() {
    if [ "$1" = "image" ]; then
        grimblast --notify copysave "${2,,}"
    elif [ "$1" = "video" ]; then
        extension=".mkv" 
        filename="$VIDEOS/screencast-`date +%Y-%m-%d-%H%M%S`$extension"
        if [ $SOUND == 0 ]; then
            wf-recorder -g "$2" -f "$filename" &
        else
            wf-recorder -a -g "$2" -f "$filename" &
        fi
        echo "$! vid $filename" > "$RECORD_PIDFILE"
    elif [ "$1" = "gif" ]; then
        extension=".gif"    # gif-2016-04-16-153906.gif
        tmpfilename="/tmp/gif-`date +%Y-%m-%d-%H%M%S-tmp`.mkv"
        filename="$VIDEOS/gif-`date +%Y-%m-%d-%H%M%S`$extension"    # .gif
        # Record a video to be converted to gif.

        echo "$! gif $tmpfilename $filename 1" > "$RECORD_PIDFILE"
    fi
}

function kill_wf() {
    # Kill wf-recorder (stopping the recording.)
    kill -INT $1 || echo "Failed to kill wf-recorder, did it crash?  Removing $RECORD_PIDFILE anyway."
    # Remove the pid file so that slip can be used as normal again.
    rm "$RECORD_PIDFILE"
}

function convert_to_gif() {
    local tfn=$1
    local pfn=$2
    local fn=$3
    local wh=$4 # 0 = width larger than height, 1 = height larger than width

    local ratio
    # If the width is larger than the height, we want to scale with the width, otherwise scale with the height.
    if [ $wh -eq 0 ]; then
        ratio="$GIF_SCALE:-1"
    else
        ratio="-1:$GIF_SCALE"
    fi

    notify "Converting to gifâ€¦"
    # Give enough time to save the file.
    sleep 1 && ffmpeg -i "$tfn" -loglevel quiet -vf fps=$GIF_FPS,scale="$ratio":flags=lanczos,palettegen "$pfn" &&
    ffmpeg -i "$tfn" -i "$pfn" -loglevel quiet -filter_complex "fps=$GIF_FPS,scale=$ratio:flags=lanczos[x];[x][1:v]paletteuse" "$fn" &&

    echo "$fn"
}

function stop_rec() {
    local choice

    local pid=$1                      # Process id (for killing ffmpeg).
    local tfn=$3                      # Temp file name (for gifs).
    local fn=$4                       # File name for the gif/vid we're saving.
    local pfn="${tfn}-palette.png"    # Palette file name (for gif rendering).

    # Stop recording.
    kill_wf "$pid"

    # When processing a gif, we canvert it straight away and then upload.
    # NOTE: gfycat does not require the video to be converted, but we convert it anyway to store
    #   the .gif file.
    # Is this actually a good idea?  We could just store the .mkv instead, but then we lose the ability to store .gif.
    if [ "$2" = "gif" ]; then
        fn=$(convert_to_gif "$tfn" "$pfn" "$fn" "$5")
        size=$(du -k $fn | cut -f1)
    else
        notify "$fn"
    fi
}

function notify() {
    notify-send -t 7000 "slip" "$1"
}

function main() {
    input="${1,,}"
    if [ $input = "screenshot" ]; then
        shot "image" $(eval "$DMENU_CMD" <<< "$DMENU_AREA_OPTS")
    elif [ $input = "video" ]; then
        geometry=$(slurp)
        shot "video" "$geometry"
    elif [ $input = "gif" ]; then
        geometry=$(slop_geom "gif")
        wxh=$(parse "geometryx" $geometry)
        off=$(parse "geometry+" $geometry)
        shot "gif" "$wxh" "$off"
    elif [ $input = "stop" ]; then
        # Get info of recording process.
        pid=$(pidof wf-reforder)
        stop_rec $pid
        exit 0
    else
        exit 0
    fi
}

# Dependencies.
depends="slurp grim ffmpeg"
while read line
do
    if ! type $line &> /dev/null ; then
        echo "$line not found, expect unexpected or breakage."
    fi
done <<< "$depends"

# Main.
# Yes, we could call this stuff with integers, but this is much clearer.
if [ "$1" = "-nu" -o "$1" = "--no-upload" -o "$2" = "-nu" -o "$2" = "--no-upload" ]; then
    NOUPLOAD=1
fi

if [ "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
elif [ "$1" = "-v" -o "$1" = "--version" ]; then
    echo "Version: $VERSION"
    exit 0
elif [ "$1" = "-s" -o "$1" = "--screenshot" ]; then
    main "screenshot"
elif [ "$1" = "-g" -o "$1" = "--gif" ]; then
    main "gif"
elif [ "$1" = "-r" -o "$1" = "--record" ]; then
    main "video"
elif [ "$1" = "-q" -o "$1" = "--stop" ]; then
    main "stop"
elif [[ ( $# == 0 ) || ( $# == 1 && "$NOUPLOAD" == "1" ) ]]; then
    if [ -a "$RECORD_PIDFILE" ]; then
        main $(eval "$DMENU_CMD" <<< "$DMENU_RECORD_OPTS")
    else
        main $(eval "$DMENU_CMD" <<< "$DMENU_TYPE_OPTS")
    fi
fi
